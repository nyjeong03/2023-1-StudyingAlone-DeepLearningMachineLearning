from sklearn.neighbors import KNeighborsClassifier

fish_length = [25.4, 26.3, 26.5, 29.0, 29.0, 29.7, 29.7, 30.0, 30.0, 30.7, 31.0, 31.0, 
                31.5, 32.0, 32.0, 32.0, 33.0, 33.0, 33.5, 33.5, 34.0, 34.0, 34.5, 35.0, 
                35.0, 35.0, 35.0, 36.0, 36.0, 37.0, 38.5, 38.5, 39.5, 41.0, 41.0, 9.8, 
                10.5, 10.6, 11.0, 11.2, 11.3, 11.8, 11.8, 12.0, 12.2, 12.4, 13.0, 14.3, 15.0]
fish_weight = [242.0, 290.0, 340.0, 363.0, 430.0, 450.0, 500.0, 390.0, 450.0, 500.0, 475.0, 500.0, 
                500.0, 340.0, 600.0, 600.0, 700.0, 700.0, 610.0, 650.0, 575.0, 685.0, 620.0, 680.0, 
                700.0, 725.0, 720.0, 714.0, 850.0, 1000.0, 920.0, 955.0, 925.0, 975.0, 950.0, 6.7, 
                7.5, 7.0, 9.7, 9.8, 8.7, 10.0, 9.9, 9.8, 12.2, 13.4, 12.2, 19.7, 19.9]

fish_data=[[l,w] for l,w in zip(fish_length, fish_weight)]
fish_target = [1]*35+[0]*14

kn = KNeighborsClassifier()

# fish_data에서 49개의 샘플 중 처음 35개는 훈련 세트, 그다음 14개는 테스트 세트
train_input = fish_data[:35]
train_target = fish_target[:35]
test_input = fish_data[35:]
test_target = fish_data[35:]

# 파이썬 리스트를 넘파이 배열로 바꾸기
import numpy as np

input_arr = np.array(fish_data)
target_arr = np.array(fish_target)

# 넘파이 배열에서 랜덤하게 샘플을 선택해 훈련 세트와 테스트 세트로 만듦
# input_arr와 target_arr에서 같은 위치는 함께 선택되어야 함 => 인덱스 값 기억해야함
# 인덱스를 섞은 다음 input_arr와 target_arr에서 샘플을 선택하면 무작위로 훈련 세트를 나누는 셈이 됨

np.random.seed(42)
# arrange() : 정수 N을 전달하면 0에서부터 N-1까지 1씩 증가하는 배열 만듦
index = np.arange(49)
#shuffle() : 주어진 배열을 무작위로 섞음
np.random.shuffle(index)

#index 배열의 처음 35개를 input_arr와 target_arr에 전달하여 랜덤하게 35개의 샘플을 훈련 세트
train_input = input_arr[index[:35]]
train_target = target_arr[index[:35]]

#나머지 14개는 테스트 세트
test_input = input_arr[index[35:]]
test_target = target_arr[index[35:]]

#산점도로 그리기
import matplotlib.pyplot as plt
plt.scatter(train_input[:,0], train_input[:,1])
plt.scatter(test_input[:,0], test_input[:,1])
plt.xlabel('length')
plt.ylabel('weight')
plt.show()
# 결과 : 산점도에 파란색 점(훈련세트)과 주황색 점(테스트 세트)이 찍힘 

# 훈련 세트와 테스트 세트로 k-최근접 이웃 모델 훈련
# fit() 메서드를 실행할 때마다 KNeighborsClassifier 클래스의 객체는 이전에 학습한 모든 것을 잃어버림

# train_input과 train_target으로 모델 훈련
kn = kn.fit(train_input, train_target)

# test_input과 test_target으로 모델 테스트
kn.score(test_input, test_target)
# 결과 : 1.0